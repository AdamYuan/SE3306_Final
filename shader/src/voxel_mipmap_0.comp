#version 450
layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

#include "Binding.h"

layout(binding = VOXEL_RADIANCE_TEXTURE) uniform sampler3D uVoxelRadiance;
layout(rgba16f, binding = VOXEL_RADIANCE_MIPMAP_IMAGE) uniform writeonly image3D uVoxelRadianceMipmaps[6];

const ivec3 kOffsets[8] = {
    {0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1},
};
const int kSides[6][4] = {{0, 1, 2, 3}, {4, 5, 6, 7}, {0, 1, 4, 5}, {2, 3, 6, 7}, {0, 2, 4, 6}, {1, 3, 5, 7}};

void main() {
	int target_size = imageSize(uVoxelRadianceMipmaps[0]).x;
	ivec3 target_pos = ivec3(gl_GlobalInvocationID);
	if (any(greaterThanEqual(target_pos, ivec3(target_size))))
		return;

	ivec3 source_base = target_pos << 1;

	vec4 arr[8] = {
	    texelFetch(uVoxelRadiance, source_base + kOffsets[0], 0),
	    texelFetch(uVoxelRadiance, source_base + kOffsets[1], 0),
	    texelFetch(uVoxelRadiance, source_base + kOffsets[2], 0),
	    texelFetch(uVoxelRadiance, source_base + kOffsets[3], 0),
	    texelFetch(uVoxelRadiance, source_base + kOffsets[4], 0),
	    texelFetch(uVoxelRadiance, source_base + kOffsets[5], 0),
	    texelFetch(uVoxelRadiance, source_base + kOffsets[6], 0),
	    texelFetch(uVoxelRadiance, source_base + kOffsets[7], 0),
	};

#define STORE(f) \
	{ \
		int o = f ^ 1; \
		vec4 sum = (arr[kSides[f][0]] + arr[kSides[o][0]] * (1.0 - arr[kSides[f][0]].a)) + \
		           (arr[kSides[f][1]] + arr[kSides[o][1]] * (1.0 - arr[kSides[f][1]].a)) + \
		           (arr[kSides[f][2]] + arr[kSides[o][2]] * (1.0 - arr[kSides[f][2]].a)) + \
		           (arr[kSides[f][3]] + arr[kSides[o][3]] * (1.0 - arr[kSides[f][3]].a)); \
		sum *= .25; \
		imageStore(uVoxelRadianceMipmaps[f], target_pos, sum); \
	}

	STORE(0)
	STORE(1)
	STORE(2)
	STORE(3)
	STORE(4)
	STORE(5)
}
