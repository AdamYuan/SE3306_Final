#version 450

// macro injections: %s
// TILE_SIZE, SUBGROUP_SIZE, SHARED_SIZE
#ifdef SUBGROUP_SIZE
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#endif
layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;

#include "Binding.h"

layout(binding = GBUFFER_VELOCITY_TEXTURE) uniform sampler2D uVelocity;
layout(rg16f, binding = MOTION_BLUR_TILE_0_IMAGE) uniform writeonly image2D uTile0;

#ifdef SHARED_SIZE
shared vec2 sMaxVelocity[SHARED_SIZE];
#endif

vec2 reduce(in const vec2 l, in const vec2 r) { return dot(l, l) >= dot(r, r) ? l : r; }

void main() {
	ivec2 source_size = textureSize(uVelocity, 0);
	ivec2 source_pos = ivec2(gl_GlobalInvocationID.xy);

	vec2 velocity = any(greaterThanEqual(source_pos, source_size)) ? vec2(0) : texelFetch(uVelocity, source_pos, 0).rg;

	ivec2 target_pos = ivec2(gl_WorkGroupID.xy);

#ifdef SUBGROUP_SIZE
	// Subgroup Reduction
	float len2 = dot(velocity, velocity);
	float len2_sg_max = subgroupMax(len2);
	uvec4 ballot = subgroupBallot(len2 == len2_sg_max);
	uint ballot_lsb = subgroupBallotFindLSB(ballot); // Get first subgroup
	if (ballot_lsb == gl_SubgroupInvocationID) {
#ifdef SHARED_SIZE
		sMaxVelocity[gl_SubgroupID] = velocity;
#else
		imageStore(uTile0, target_pos, vec4(velocity, 0, 0));
		return;
#endif
	}

#elif defined(SHARED_SIZE)

	sMaxVelocity[gl_LocalInvocationIndex] = velocity;

#else

	imageStore(uTile0, target_pos, vec4(velocity, 0, 0));
	return;

#endif

#ifdef SHARED_SIZE

	// Parallel Reduction
#define PARALLEL_REDUCE(N) \
	barrier(); \
	if (gl_LocalInvocationIndex < N && gl_LocalInvocationIndex + N < SHARED_SIZE) \
		sMaxVelocity[gl_LocalInvocationIndex] = \
		    reduce(sMaxVelocity[gl_LocalInvocationIndex], sMaxVelocity[gl_LocalInvocationIndex + N]);

	if (gl_LocalInvocationIndex >= SHARED_SIZE)
		return;

#if SHARED_SIZE > 32768
#error TOO MUCH REDUCTIONS
#endif
#if SHARED_SIZE > 16384
	PARALLEL_REDUCE(16384)
#endif
#if SHARED_SIZE > 8192
	PARALLEL_REDUCE(8192)
#endif
#if SHARED_SIZE > 4096
	PARALLEL_REDUCE(4096)
#endif
#if SHARED_SIZE > 2048
	PARALLEL_REDUCE(2048)
#endif
#if SHARED_SIZE > 1024
	PARALLEL_REDUCE(1024)
#endif
#if SHARED_SIZE > 512
	PARALLEL_REDUCE(512)
#endif
#if SHARED_SIZE > 256
	PARALLEL_REDUCE(256)
#endif
#if SHARED_SIZE > 128
	PARALLEL_REDUCE(128)
#endif
#if SHARED_SIZE > 64
	PARALLEL_REDUCE(64)
#endif
#if SHARED_SIZE > 32
	PARALLEL_REDUCE(32)
#endif
#if SHARED_SIZE > 16
	PARALLEL_REDUCE(16)
#endif
#if SHARED_SIZE > 8
	PARALLEL_REDUCE(8)
#endif
#if SHARED_SIZE > 4
	PARALLEL_REDUCE(4)
#endif
#if SHARED_SIZE > 2
	PARALLEL_REDUCE(2)
#endif
	// SHARED_SIZE > 1 is ensured
	barrier();
	if (gl_LocalInvocationIndex == 0) {
		velocity = reduce(sMaxVelocity[0], sMaxVelocity[1]);
		imageStore(uTile0, target_pos, vec4(velocity, 0, 0));
	}

#endif
}
