#version 450

layout(constant_id = 1) const uint SUBGROUP_SIZE = 32;
layout(constant_id = 2) const uint SHARED_SIZE = 8;

// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_ballot : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x_id = 0, local_size_y_id = 0, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D uVelocity;
layout(rg16f, binding = 1) uniform writeonly image2D uTile0;

shared vec2 sMaxVelocity[SHARED_SIZE];

vec2 reduce(in const vec2 l, in const vec2 r) { return dot(l, l) >= dot(r, r) ? l : r; }

void main() {
	ivec2 source_size = textureSize(uVelocity, 0);
	ivec2 source_pos = ivec2(gl_GlobalInvocationID.xy);

	vec2 velocity = any(greaterThanEqual(source_pos, source_size)) ? vec2(0) : texelFetch(uVelocity, source_pos, 0).rg;

	ivec2 target_pos = ivec2(gl_WorkGroupID.xy);

	/* if (SUBGROUP_SIZE > 1) {
	    // Subgroup Reduction
	    float len2 = dot(velocity, velocity);
	    float len2_sg_max = subgroupMax(len2);
	    uvec4 ballot = subgroupBallot(len2 == len2_sg_max);
	    uint ballot_lsb = subgroupBallotFindLSB(ballot);
	    if (ballot_lsb == gl_SubgroupInvocationID) {
	        if (SHARED_SIZE > 1)
	            // Might have correctness issue on Intel Graphics Cards, Fuck Intel
	            sMaxVelocity[gl_LocalInvocationIndex / SUBGROUP_SIZE] = velocity;
	        else {
	            imageStore(uTile0, target_pos, vec4(velocity, 0, 0));
	            return;
	        }
	    }
	} else */
	if (SHARED_SIZE > 1) {
		sMaxVelocity[gl_LocalInvocationIndex] = velocity;
	} else {
		imageStore(uTile0, target_pos, vec4(velocity, 0, 0));
		return;
	}

	// Parallel Reduction
#define PARALLEL_REDUCE(N) \
	barrier(); \
	if (SHARED_SIZE > N) { \
		if (gl_LocalInvocationIndex < N && gl_LocalInvocationIndex + N < SHARED_SIZE) \
			sMaxVelocity[gl_LocalInvocationIndex] = \
			    reduce(sMaxVelocity[gl_LocalInvocationIndex], sMaxVelocity[gl_LocalInvocationIndex + N]); \
	}

	if (gl_LocalInvocationIndex >= SHARED_SIZE)
		return;

	PARALLEL_REDUCE(16384)
	PARALLEL_REDUCE(8192)
	PARALLEL_REDUCE(4096)
	PARALLEL_REDUCE(2048)
	PARALLEL_REDUCE(1024)
	PARALLEL_REDUCE(512)
	PARALLEL_REDUCE(256)
	PARALLEL_REDUCE(128)
	PARALLEL_REDUCE(64)
	PARALLEL_REDUCE(32)
	PARALLEL_REDUCE(16)
	PARALLEL_REDUCE(8)
	PARALLEL_REDUCE(4)
	PARALLEL_REDUCE(2)
	// SHARED_SIZE > 1 is ensured
	barrier();
	if (gl_LocalInvocationIndex == 0) {
		velocity = reduce(sMaxVelocity[0], sMaxVelocity[1]);
		imageStore(uTile0, target_pos, vec4(velocity, 0, 0));
	}
}
